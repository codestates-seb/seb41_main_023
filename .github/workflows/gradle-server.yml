# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
#

name: Java CI with Gradle

on:
  push:
    branches: [ "dev" ]

permissions:
  contents: read

env:
  S3_BUCKET_NAME: project-main23
  working-directory: ./server
  PROPERTIES_PATH: ./server/src/main/resources/application.properties

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
     # properties secret 설정
    - name: Set application.properties
      run: |
        touch ${{ env.PROPERTIES_PATH }}
        echo "
        spring.datasource.url=${{ secrets.RDS_ENDPOINT }}
        spring.datasource.username=${{ secrets.RDS_MYSQL_ADMIN_ID }}
        spring.datasource.password=${{ secrets.RDS_MYSQL_ADMIN_PW }}
        jwt.secret-key=${{ secrets.JWT_SECRET_KEY }}
        spring.redis.password=${{ secrets.REDIS_PASSWORD }}
        spring.security.oauth2.client.registration.google.clientId=${{ secrets.GOOGLE_CLIENT_ID }}
        spring.security.oauth2.client.registration.google.clientSecret=${{ secrets.GOOGLE_SECRET }}
        spring.security.oauth2.client.registration.kakao.client-id=${{ secrets.KAKAO_CLIENT_ID }}
        spring.security.oauth2.client.registration.kakao.client-secret=${{ secrets.KAKAO_SECRET }}
        spring.security.oauth2.client.registration.naver.clientId=${{ secrets.NAVER_CLIENT_ID }}
        spring.security.oauth2.client.registration.naver.client-secret=${{ secrets.NAVER_SECRET }}
        spring.security.oauth2.client.registration.facebook.clientId=${{ secrets.FACEBOOK_CLIENT_ID }}
        spring.security.oauth2.client.registration.facebook.clientSecret=${{ secrets.FACEBOOK_SECRET }}
        cloud.aws.credentials.access-key=${{ secrets.S3_ACCESS_KEY }}
        cloud.aws.credentials.secret-key=${{ secrets.S3_SECRET_KEY }}
        cloud.aws.s3.bucket=${{ secrets.S3_BUCKET }}
        config.domain=${{ secrets.DOMAIN }}
        " >> ${{ env.PROPERTIES_PATH }}  
        
      # 연결 권한 설정
    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew
      working-directory: ${{ env.working-directory }}

     # 빌드
    - name: Build with Gradle
      run: ./gradlew clean build
      working-directory: ${{ env.working-directory }}
     

    # build한 후 프로젝트를 압축합니다.
    - name: Make zip file
      run: zip -r ./41-mainproject-23.zip .
      shell: bash
      working-directory: ${{ env.working-directory }}
    
    # Access Key와 Secret Access Key를 통해 권한을 확인합니다.
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # 등록한 Github Secret이 자동으로 불려옵니다.
        aws-region: ap-northeast-2

    # 압축한 프로젝트를 S3로 전송합니다.
    - name: Upload to S3
      run: aws s3 cp --region ap-northeast-2 ./41-mainproject-23.zip s3://$S3_BUCKET_NAME/41-mainproject-23.zip
      working-directory: ${{ env.working-directory }}

    # CodeDeploy에게 배포 명령을 내립니다.
    - name: Code Deploy
      run: >
        aws deploy create-deployment --application-name 41-mainproject-23 
        --deployment-config-name CodeDeployDefault.AllAtOnce
        --deployment-group-name 41-mainproject-23-group
        --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=41-mainproject-23.zip
